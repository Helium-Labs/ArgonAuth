/* tslint:disable */
/* eslint-disable */
/**
 * KeychainRelyingParty API with Algorand SmartSig delegated access
 * A client for interfacing with the KeychainRelyingParty API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AssertOptionsRequestModel } from '../models';
import { AssertionOptionsResponse } from '../models';
import { AssertionResponseModel } from '../models';
import { CredentialOptionsModel } from '../models';
import { GetExchangeCodeRequestModel } from '../models';
import { MakeAssertionRequestModel } from '../models';
import { MakeCredentialOptionsModel } from '../models';
import { MakeCredentialResponse } from '../models';
import { MakeCredentialsRequestModel } from '../models';
import { VerifyEmailCodeRequestModel } from '../models';
/**
 * FidoApi - axios parameter creator
 * @export
 */
export const FidoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AssertOptionsRequestModel} body 
         * @param {string} [clientSessionKeyB64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoAssertionOptionsPost: async (body: AssertOptionsRequestModel, clientSessionKeyB64?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoAssertionOptionsPost.');
            }
            const localVarPath = `/assertionOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientSessionKeyB64 !== undefined) {
                localVarQueryParameter['clientSessionKeyB64'] = clientSessionKeyB64;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetExchangeCodeRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoExchangeCodeForJwt: async (body: GetExchangeCodeRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoExchangeCodeForJwt.');
            }
            const localVarPath = `/exchangeCodeForJWT`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MakeAssertionRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoMakeAssertion: async (body: MakeAssertionRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoMakeAssertion.');
            }
            const localVarPath = `/makeAssertion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MakeCredentialsRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoMakeCredential: async (body: MakeCredentialsRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoMakeCredential.');
            }
            const localVarPath = `/makeCredential`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MakeCredentialOptionsModel} body 
         * @param {string} [clientSessionKeyB64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoMakeCredentialOptions: async (body: MakeCredentialOptionsModel, clientSessionKeyB64?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoMakeCredentialOptions.');
            }
            const localVarPath = `/makeCredentialOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientSessionKeyB64 !== undefined) {
                localVarQueryParameter['clientSessionKeyB64'] = clientSessionKeyB64;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoTokenIsValid: async (body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoTokenIsValid.');
            }
            const localVarPath = `/tokenIsValid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoUsernameIsAvailable: async (body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoUsernameIsAvailable.');
            }
            const localVarPath = `/usernameIsAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmailCodeRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fidoVerifyEmailCode: async (body: VerifyEmailCodeRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fidoVerifyEmailCode.');
            }
            const localVarPath = `/verifyEmailCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FidoApi - functional programming interface
 * @export
 */
export const FidoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AssertOptionsRequestModel} body 
         * @param {string} [clientSessionKeyB64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoAssertionOptionsPost(body: AssertOptionsRequestModel, clientSessionKeyB64?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AssertionOptionsResponse>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoAssertionOptionsPost(body, clientSessionKeyB64, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {GetExchangeCodeRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoExchangeCodeForJwt(body: GetExchangeCodeRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoExchangeCodeForJwt(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {MakeAssertionRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoMakeAssertion(body: MakeAssertionRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AssertionResponseModel>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoMakeAssertion(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {MakeCredentialsRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoMakeCredential(body: MakeCredentialsRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MakeCredentialResponse>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoMakeCredential(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {MakeCredentialOptionsModel} body 
         * @param {string} [clientSessionKeyB64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoMakeCredentialOptions(body: MakeCredentialOptionsModel, clientSessionKeyB64?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CredentialOptionsModel>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoMakeCredentialOptions(body, clientSessionKeyB64, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoTokenIsValid(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoTokenIsValid(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoUsernameIsAvailable(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoUsernameIsAvailable(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {VerifyEmailCodeRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoVerifyEmailCode(body: VerifyEmailCodeRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await FidoApiAxiosParamCreator(configuration).fidoVerifyEmailCode(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FidoApi - factory interface
 * @export
 */
export const FidoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AssertOptionsRequestModel} body 
         * @param {string} [clientSessionKeyB64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoAssertionOptionsPost(body: AssertOptionsRequestModel, clientSessionKeyB64?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AssertionOptionsResponse>> {
            return FidoApiFp(configuration).fidoAssertionOptionsPost(body, clientSessionKeyB64, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetExchangeCodeRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoExchangeCodeForJwt(body: GetExchangeCodeRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return FidoApiFp(configuration).fidoExchangeCodeForJwt(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MakeAssertionRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoMakeAssertion(body: MakeAssertionRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<AssertionResponseModel>> {
            return FidoApiFp(configuration).fidoMakeAssertion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MakeCredentialsRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoMakeCredential(body: MakeCredentialsRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<MakeCredentialResponse>> {
            return FidoApiFp(configuration).fidoMakeCredential(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MakeCredentialOptionsModel} body 
         * @param {string} [clientSessionKeyB64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoMakeCredentialOptions(body: MakeCredentialOptionsModel, clientSessionKeyB64?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CredentialOptionsModel>> {
            return FidoApiFp(configuration).fidoMakeCredentialOptions(body, clientSessionKeyB64, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoTokenIsValid(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return FidoApiFp(configuration).fidoTokenIsValid(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoUsernameIsAvailable(body: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return FidoApiFp(configuration).fidoUsernameIsAvailable(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyEmailCodeRequestModel} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fidoVerifyEmailCode(body: VerifyEmailCodeRequestModel, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return FidoApiFp(configuration).fidoVerifyEmailCode(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FidoApi - object-oriented interface
 * @export
 * @class FidoApi
 * @extends {BaseAPI}
 */
export class FidoApi extends BaseAPI {
    /**
     * 
     * @param {AssertOptionsRequestModel} body 
     * @param {string} [clientSessionKeyB64] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoAssertionOptionsPost(body: AssertOptionsRequestModel, clientSessionKeyB64?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AssertionOptionsResponse>> {
        return FidoApiFp(this.configuration).fidoAssertionOptionsPost(body, clientSessionKeyB64, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {GetExchangeCodeRequestModel} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoExchangeCodeForJwt(body: GetExchangeCodeRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return FidoApiFp(this.configuration).fidoExchangeCodeForJwt(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {MakeAssertionRequestModel} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoMakeAssertion(body: MakeAssertionRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<AssertionResponseModel>> {
        return FidoApiFp(this.configuration).fidoMakeAssertion(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {MakeCredentialsRequestModel} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoMakeCredential(body: MakeCredentialsRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<MakeCredentialResponse>> {
        return FidoApiFp(this.configuration).fidoMakeCredential(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {MakeCredentialOptionsModel} body 
     * @param {string} [clientSessionKeyB64] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoMakeCredentialOptions(body: MakeCredentialOptionsModel, clientSessionKeyB64?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CredentialOptionsModel>> {
        return FidoApiFp(this.configuration).fidoMakeCredentialOptions(body, clientSessionKeyB64, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoTokenIsValid(body: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return FidoApiFp(this.configuration).fidoTokenIsValid(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoUsernameIsAvailable(body: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return FidoApiFp(this.configuration).fidoUsernameIsAvailable(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {VerifyEmailCodeRequestModel} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FidoApi
     */
    public async fidoVerifyEmailCode(body: VerifyEmailCodeRequestModel, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return FidoApiFp(this.configuration).fidoVerifyEmailCode(body, options).then((request) => request(this.axios, this.basePath));
    }
}
